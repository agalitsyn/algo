"""
На стол в ряд выложены карточки, на каждой карточке написано натуральное число. За один ход разрешается взять карточку
либо с левого, либо с правого конца ряда. Всего можно сделать k ходов. Итоговый счет равен сумме чисел на выбранных
карточках. Определите, какой максимальный счет можно получить по итогам игры. Вы можете воспользоваться заготовками
кода для данной задачи из репозитория курса

Формат ввода
В первой строке записано число карточек n (1≤n≤105).
Во второй строке записано число ходов k (1≤k≤n). В третьей строке через пробел даны числа, записанные на карточках.
i-е по счету число записано на i-й слева карточке. Все числа натуральные и не превосходят 104.

Формат вывода
Выведите единственное число —- максимальную сумму очков, которую можно набрать, сделав k ходов.

Пример 1
Ввод
7
3
5 8 2 1 3 4 11
Вывод
24

-- ПРИНЦИП РАБОТЫ и СЛОЖНОСТЬ --
Задачу можно решить через:

ДП - сложность O(k^2),
метод скользящего окна за О(k)

-- ДОКАЗАТЕЛЬСТВО КОРРЕКТНОСТИ --
Мы используем метод скользящего окна для обновления текущей суммы. На каждой итерации мы вычитаем последнюю карту из
первой группы и добавляем карту из второй группы (с конца).

-- ID успешной посылки --
https://contest.yandex.ru/contest/36783/run-report/131768454/
"""

from typing import List


def get_card_count(n: int, k: int, cards: List[int]) -> int:
    # Если количество ходов больше либо равно количеству карточек,
    # то в любом случае перебор карточек по ходам это сумма всех карточек
    if k >= n:
        return sum(cards)

    # Берем сумму подмассива по количеству ходов
    current_sum = sum(cards[0:k])
    # Это будет первый отрезок, который мы посчитали и по-умолчанию мы считаем его максимальным,
    # чтобы потом с ним сравнивать другие
    max_sum = current_sum

    # Чтобы посчитать другие отрезки нужно перебрать остальные варианты ходов
    for i in range(1, k + 1):
        print("Current iteration i", i)
        print("Index for left side k-i", k - i)
        print("Index for right side n-i", n - i)
        print("Card being removed from left cards[k - i]", cards[k - i])
        print("Card being added from right cards[n - i]", cards[n - i])
        print()

        # Update current sum:
        # - Subtract card from left side (cards[k - i])
        # - Add card from right side (cards[n - i])
        current_sum = current_sum - cards[k - i] + cards[n - i]
        # Сравниваем current_sum с пред значением max_sum и берем большее из них
        max_sum = max(max_sum, current_sum)

    return max_sum


n = int(input())
k = int(input())
cards = list(map(int, input().split()))

print(get_card_count(n, k, cards))
